FROM python:3.6

ARG DEVELOPMENT

#ENV NODE_ENV development
ENV NODE_ENV production

WORKDIR /var/lib

# replace shell with bash so we can source files
#RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# nvm environment variables
ENV NVM_DIR /usr/local/nvm
ENV NODE_VERSION 10.13.0

RUN mkdir $NVM_DIR

# RUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

# install node and npm
RUN echo "source $NVM_DIR/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default" | bash

# add node and npm to path so the commands are available
ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

#RUN ln -sf NVM_DIR/versions/node/v$NODE_VERSION/bin/node /usr/bin/nodejs
#RUN ln -sf $NVM_DIR/versions/node/v$NODE_VERSION/bin/node /usr/bin/node
#RUN ln -sf $NVM_DIR/versions/node/v$NODE_VERSION/bin/npm /usr/bin/npm

RUN ls $NVM_DIR/versions/node/v$NODE_VERSION/bin

RUN node -v
RUN npm -v

# RUN apt-get update \
#    && apt-get install -y --no-install-recommends \
#:    nodejs
    # build-essential \
    # git \
    # libevent-dev \
    # libffi-dev \
    # libfontconfig \
    # libpq-dev \
    # libssl-dev \
    # python-dev \
    # python-setuptools \
    # python-pip \
    # python-virtualenv \
    # curl \
    # openssl \
    # gnupg2

RUN pip install --upgrade pip setuptools

RUN git clone https://github.com/hypothesis/h.git hypothesis

WORKDIR /var/lib/hypothesis

# Use specific version of the software to make sure it works correctly
RUN git checkout 50bc0e93b80329d1b98df1fe7c6e79f19d90a5b1

COPY setup_auth_clients.py .
COPY Makefile_service ./Makefile
RUN make clean

# Install build deps, build, and then clean up.
# RUN pip install -r requirements.txt
RUN echo "$DEVELOPMENT"
RUN if [ "$DEVELOPMENT" = "true" ]; then echo "installing python dependencies for development"; else echo "installing python dependencies"; fi
RUN if [ "$DEVELOPMENT" = "true" ]; then pip install -r requirements-dev.in ; else pip install -r requirements.txt; fi

# # Copy collectd config
# COPY conf/collectd.conf /etc/collectd/collectd.conf
# RUN mkdir /etc/collectd/collectd.conf.d

# COPY . .

# Expose the default port.
EXPOSE 5000

ENV CLIENT_OAUTH_ID $HYPOTHESIS_CLIENT_ID
ENV CLIENT_URL $HYPOTHESIS_CLIENT_URL
ENV APP_URL $APP_URL
ENV AUTHORITY "localhost"

# Set the application environment
ENV PATH /var/lib/hypothesis/bin:$PATH
ENV PYTHONIOENCODING utf_8
ENV PYTHONPATH /var/lib/hypothesis:$PYTHONPATH

# Delete lines in `devserver.py` that would otherwise overwrite our environment variable for websocket_url.
# We provide our own WEBSOCKET_URL in the .env file.
RUN sed -i '/WEBSOCKET_URL/d' ./h/cli/commands/devserver.py

RUN if [ "$DEVELOPMENT" = "false" ]; then sed -i -e 's/development-//g' h/cli/commands/devserver.py; fi

# Start the web server by default
RUN npm install -g gulp-cli

RUN npm install

# # initialize the dev server (DOESN'T WORK)
# RUN make dev-init

ENTRYPOINT ["make", "--debug=b", "dev"]
